#############################################################################################

01. 프로젝트 생성
    ㄴ JDK 11버전 준비
    ㄴ https://start.psring.io 에서 프로젝트 구성 파일 생성 (gradle, jdk11, spring boot, pakc)
    ㄴ Group ID : 상위패키지명(SpringBoot), artifact-ID : 프로젝트패키지명(SpringBoot-GetStarted)
    ㄴ Dependencies : Spring Web, Thymeleaf [추가]
    ㄴ bundle.gradle 파일에서 프로젝트 구성 정보 확인
    ㄴ @SpringBootApplication : 스프링 메인 실행 함수
    ㄴ Preference -> Gradle -> [Build & Run] : IntelliJ IDEA 로 변경 + Run tests using 도 동일


02. 라이브러리 살펴보기
    ㄴ External Library 살펴보기
    ㄴ View(왼쪽하단) -> Gradle 탭 보기 -> Dependencies 로 의존성이 존재하는 jar 패키지를 확인

#############################################################################################

03. view 환경설정
    ㄴ @controller 생성
    ㄴ @GetMapping 연결
    ㄴ viewResolver 에 호출 정적 페이시 호출

    ㄴ 전달 받은 파라미터 Model 은 UI 데이터 자료를 말함 (※ model.addAttribute(<K, V>) 로 값을 지정)
    ㄴ resources -> [static] or [templates] 에 웹 자원을 보관
    ㄴ thymeleaf 의 커스텀 태그 사용 변수 바인드 ${val_name}
    ㄴ dev-tools 로 HTML 컴파일후 즉시 반영 확인 가능

04. 빌드하고 실행하기
    ㄴ gradle 을 통한 build 하기 (gradlew build, gradlew clean, gradlew clean build)
    ㄴ java -jar {file_name}.jar 로 응용프로그램(서버 컨테이너 포함) 구동 가능

05. 정적 컨텐츠
    ㄴ resources -> [static] or [templates] 에 웹 자원을 보관

06. MVC 와 템플릿 엔진
    ㄴ @Controller 에서 지정 가능한 다양한 컨트롤 옵션
    ㄴ @RequestParam("name") 의 속성 지정 방법

07. API
    ㄴ @ResponseBody 어노테이션 설정 : 서비스 호출에 대한 응답값을 viewResolver 가 아닌 직접 지정한다.
    ㄴ @ResponseBody 인 경우 class 를 리턴 하는 경우 JSON 형태로 응답값을 생성하게 된다.
    ㄴ viewResolver 와 HttpMessageConverter 의 차이

08. 비즈니스 요구사항 정리
    ㄴ 컨트롤러 -> 서비스 -> 리파지토리 -> DB
    ㄴ           [도메인]
    ㄴ 형태로 전체적인 패키지 구조를 정의
    ㄴ 컨트롤러 : 최종 고객 또는 사용자와 인터페이스 하는 레이어
    ㄴ 서비스   : 비즈니스 로직을 정의하는 레이어
    ㄴ 리파지토리 : DB 등 저장 매체와의 트랜잭션을 관장하는 레이어
#############################################################################################

09. 회원도메인과 리파지토리 만들기
    ㄴ 도메인 : 각 주제영역별 관련 정보를 담는 자료구조
    ㄴ 리파지토리 : DB 또는 파일시스템등에 저장하기 위핸 Operation 이 정의된 클래스
    ㄴ 일반적으로 C, R, U, D 를 정의

10. 회원도메인과 리파지토리 테스트
    ㄴ 생성한 리파지토리들의 기능 테스트를 수행한다.
    ㄴ JUnit 5 를 활용한 유닛 테스트 검증
    ㄴ test 패키지에 테스트 클래스 생성
    ㄴ @Test 어노테이션
    ㄴ Assertions 로 응답값과 기대값의 차이를 확인
    ㄴ AssertThat
    ㄴ @AfterEach : 후처리 로직 확인

11. 회원서비스개발
    ㄴ 서비스 레이어 생성 (interface 생성 후 이를 구현한 implementation service class 생성)
    ㄴ 서비스 로직을 구현
    ㄴ Optional 변수의 Null 확인 (ifPresent)

12. 회원서비스 테스트
    ㄴ given, when, then 방식의 테스트 구조 세우기
    ㄴ assertThrows(KindofException.class, () -> whatKindofService.method(param)) 호출결과 예상되는 Exception 의 발생여부를 검증
    ㄴ @BeforeEach : 전처리 로직 확인
    ㄴ DI 에 관한 간단한 샘플

#############################################################################################

13. 컴포넌트 스캔
    ㄴ 각 클래스별 @Component 어노테이션의 모습 (@Controller, @Service, @Repository)
    ㄴ 컴포넌트 스캔 방식(@Component) vs 스프링빈 수동 기술 방식 (@Configuration + @Bean)

14. 자바코드로 직접 서술하는 스프링 Bean
    ㄴ 수동 서술 방식이 사용되는 예시.

15. 회원 등록과 조회 화면 생성
    ㄴ [GetMapping] vs [PostMapping]

16. 회원 목록 등록
    ㄴ MemberForm DTO 생성
    ㄴ createMember 서비스를 이용하여 회원 정보 등록

17. 회원 목록 조회
    ㄴ Thymeleaf 커스텀 태그를 이용하여 목록 조회 구현

#############################################################################################
18. H2 데이터 베이스 설치
    ㄴ H2 Database 설치 (https://www.h2database.com/html/main.html)
    ㄴ H2 Console 실행 후 jdbc:h2:~/test 으로 연결하여 db 파일 생성
    ㄴ 이후 H2 Console 을 통해 JDBC URL 을 jdbc:h2:tcp://localhost/~/test 로 변경 접속
    ㄴ 설정 정보의 문제가 있을 시 test.mv.db 파일 삭제 후 재진행
EXEC>
DROP TABLE IF EXISTS MEMBER CASCADE;
CREATE TABLE MEMBER
(
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    NAME VARCHAR(256),
    PRIMARY KEY(ID)
)

19. JDBC 설치
    ㄴ bundle.gradle 에 아래 항목 추가
        - implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        - runtimeOnly 'com.h2database:h2'
    ㄴ perties 에 아래 항목 추가
        - spring.datasource.url=jdbc:h2:tcp://localhost/~/test
        - spring.datasource.driver-class-name:org.h2.Driver
        - spring.datasource.username: sa
    ㄴ [Summary]
        - OCP (Open Close Principle) : 확장에는 열려 있고 수정에는 닫혀있다.
        - Spring DI 를 사용하면 기존 코드 수정 없이 대상 클래스를 교체할 수 있다.


20. 스프링 통합 테스트
    ㄴ JUnit 테스트에 @SpringBootTest 어노테이션 추가로 컨테이너 동작과 함께 테스트가 가능해짐
    ㄴ @Transactional 옵션으로 최종 커밋을 유예 시킬 수 있음.
    ㄴ @Commit 어노테이션으로 처리결과를 커밋시킬 수 있음.

21. JDBC template
    ㄴ JDBCTemplate 은 DB 호출시 반복적으로 작성하게 되는 코드들을 단축 시켜 준다.
    ㄴ jdbcTemplate.query({query}, {rowMapper}, {values}) 메서드 호출을 통해서 질의 작성이 간결해진다.
    ㄴ RowMapper 는 결과 값(ResultSet) 을 특정 객제(Member.class)로 데이터를 옮겨 담아준다.

22. JPA (ORM : Object Relation Mapping)
    ㄴ SQL 과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전활 할 수 있다.
    ㄴ [제거] : implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    ㄴ [추가] : implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    ㄴ [application.properties] 에
        - spring.jpa.show-sql=true 항목을 추가한다.
        - spring.jpa.hibernate.ddl-auto=none 항목을 추가한다. (엔터티 클래스 존재시 자동으로 테이블 생성을 지원하는 기능)
    ㄴ JPA 사용시 EntityManger 가 동반된다.
    ㄴ JPA 가 최종적으로 호출 되는 서비스는 Hibernate 구현체 이다.
    ㄴ Hinernate 는 JPA 로 정의한 실제 쿼리를 JDBC 를 통해 호출하는 것을 관리해준다.

23. Spring Data JPA
    ㄴ I/F 작성만으로 실제 동작 가능한 쿼리와 클래스가 자동으로 생성된다.
    ㄴ 맴버의 이름을 기준으로 findBy{something} 메서드가 자동으로 생성된다.
    ㄴ 다이나믹한 쿼리는 Querydsl 이라는 라이브러리로 해결가능하다.
    ㄴ ORM 로 해결 안되는 경우 Native Query 사용이 가능하다.

24. AOP
    ㄴ Aspect-Oriented Programming : 관점지향프로그래밍
    ㄴ 공통 관심 사항(Cross-Cutting Concern), 핵심 관심 사항(Core Concern)을 분리.
    ㄴ 공통 관심 사항 : 각 메서드의 호출 시간을 측정 하고 싶다.
    ㄴ 핵심 관심 사항 : 기존 비즈니스 로직

25. AOP 적용
    ㄴ @Aspect 어노테이션으로 정의된 커스텀 클래스를 생성한다.
    ㄴ @Aspect 클래스는 @Component 어노테이션으로 스프링빈 객체화 한다.
    ㄴ execute 메서드를 정의하여 주입될 로직을 정의한다.
    ㄴ @Around("execution(* SpringBoot.SpringBootGetStarted..*(..))")
    ㄴ 형태로 패키지의 어느 지점에 해당 로직들이 주입될지를 정의한다.
    ㄴ 스프링의 AOP 주입 방식
        - Controller, Service, Repository 등을 스프링 빈화 하는 이유는
        - 이를 스프링 프록시에서 관리가 가능해지기 때문임.
        - 때문에 Aspect 로 주입하는 클래스는 호출 클래스가 별도로 기술 하지 않아도
        - 해당 클래스를 단계 마다 주입이 가능해지는건 결국 프록시에서 해당 빈들을 차례로 호출 할 수 있기 때문임.

26. 다음으로
